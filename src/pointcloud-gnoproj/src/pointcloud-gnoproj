#!/bin/bash
# pointcloud-procedures - Camera pointcloud procedures
#
# Copyright (c) 2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script parameters #
PARAM_MOUNT="/data/"
PARAM_MAC=""
PARAM_MASTER=""
PARAM_CPU_THREADS=""

# Loop breaker
LOOP_BREAK="0"

# Help function
_help() {
    echo """
    Usage: $(basename $0) [OPTIONS]

    [Required arguments]
    --mount-point       Base mount directory
    --mac-address       Camera MAC address
    --master-timestamp  Master timestamp

    [Optional arguments]
    --cpu-threads       Process localy with specified number of threads
    --help              Show this message
    """
}

# Trap ctrl-c and call ctrl_c()
trap ctrl_c INT

# CTRL-C handler function
function ctrl_c() {

    # Set loop break flag
    LOOP_BREAK="1"
}

# Arguments and parameters parser
arguments() {

    # Search in arguments
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --mount-point)
                PARAM_MOUNT="$1"
                shift
            ;;
            --mac-address)
                PARAM_MAC="$1"
                shift
            ;;
            --master-timestamp)
                PARAM_MASTER="$1"
                shift
            ;;
            --cpu-threads)
                if [ -z "$1" ]; then
                    PARAM_CPU_THREADS="+0"
                else
                    PARAM_CPU_THREADS="$1"
                fi
                shift
            ;;
            --help | -h)
                _help
                exit
            ;;
        esac

    done

}

if [ $# -eq 0 ]; then
    _help
    exit
fi

# Argument and parameters #
arguments $@

# Check execution consistency #
if [ -z "$PARAM_MOUNT" ] || [ -z "$PARAM_MAC" ] || [ -z "$PARAM_MASTER" ]; then

    # Exit script #
    echo "Error : cannot continue execution without --mount-point/--mac-address/--master-timestamp parameters"
    exit 1

fi

# Check execution consistency #
if [ ! -d $PARAM_MOUNT/camera ]; then

    # Exit script #
    echo "Error : unable to access standard directory with specified mount point"
    exit 1

fi

# SSH configs cirectory
SSH_CONFIGS_DIR="$PARAM_MOUNT/system/etc/ssh-configs/pointcloud-procedures"

# SSH config file
SSH_CONFIG_FILE="$SSH_CONFIGS_DIR/pointcloud-gnoproj.conf"

# footage base folder
FOOTAGE_DIR="$PARAM_MOUNT/footage/$PARAM_MAC/master/$PARAM_MASTER"

# TILES folder
TILES_DIR="$FOOTAGE_DIR/tiles/0"

# GNOPROJ TILES folder
OUTPUT_TILES_DIR="$FOOTAGE_DIR/tiles/0/sensor"

# Scripts paths
PARALLEL_SCRIPT="parallel"
GNOPROJ_SCRIPT="pointcloud-gnoproj-worker"
VERIFY_SCRIPT="pointcloud-gnoproj-verify"

# Build MOV list
TS_LIST="$(
    find $TILES_DIR -type f -iname '*.tiff' -printf '%fn\n' | cut -d'-' -f1 | replace './' '' | sort -u
)"

# Check MOV list length
if [ ${#TS_LIST} -gt 0 ]; then

    # Initialize file list array
    FILES_LIST=()

    # Iterate over timestamps
    for ts in $TS_LIST; do

        # Iterate over possible modules
        for i in $(seq -f "%02g" 0 25); do

            # Append file name to array
            FILES_LIST+=("$ts-$i-DECONV-RGB24_EQR.tiff")

        done

    done

    # Verify tiles
    >&2 echo "[$(date '+%F %R')] pointcloud-gnoproj : Checking for corrupted tiles..."

    if [ -d "$OUTPUT_TILES_DIR" ]; then

        # Check for CPU threads argument
        if [ -z "$PARAM_CPU_THREADS" ]; then

            # Start GNOPROJ procedure
            printf '%s\n' "${FILES_LIST[@]}" | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta --ungroup --sshloginfile $SSH_CONFIG_FILE $VERIFY_SCRIPT $PARAM_MOUNT \
            $PARAM_MAC \
            $PARAM_MASTER \
            {}
        else

            # Start GNOPROJ procedure
            printf '%s\n' "${FILES_LIST[@]}" | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta --ungroup -j$PARAM_CPU_THREADS $VERIFY_SCRIPT $PARAM_MOUNT \
            $PARAM_MAC \
            $PARAM_MASTER \
            {}
        fi

    else

        # Verify tiles
        >&2 echo -e "[$(date '+%F %R') \e[33mWARNING\e[39m] pointcloud-gnoproj : Skipping verification tiles not projected..."

    fi

    # Loop break checker
    if [ $LOOP_BREAK -ne 0 ]; then exit; fi

    # Project tiles
    >&2 echo "[$(date '+%F %R')] pointcloud-gnoproj : Projecting tiles..."

    if [ -z "$PARAM_CPU_THREADS" ]; then
        printf '%s\n' "${FILES_LIST[@]}" | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta --ungroup --sshloginfile $SSH_CONFIG_FILE $GNOPROJ_SCRIPT $PARAM_MOUNT \
        $PARAM_MAC \
        $PARAM_MASTER \
        {}
    else
        printf '%s\n' "${FILES_LIST[@]}" | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta --ungroup -j$PARAM_CPU_THREADS $GNOPROJ_SCRIPT $PARAM_MOUNT \
        $PARAM_MAC \
        $PARAM_MASTER \
        {}
    fi

else

    # Display warning segment
    >&2 echo "[$(date '+%F %R')] pointcloud-gnoproj : Master $PARAM_MASTER have no EQR tiles, skipping"
fi
